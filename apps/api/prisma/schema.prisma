// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Upload {
  id    Int    @id @default(autoincrement())
  title String
  image String
}

model Test {
  id     Int        @id @default(autoincrement())
  title  String     @unique
  status testStatus @default(pending)
}

enum testStatus {
  pending
  confimation
  cancel
}

model User {
  id                 Int            @id @default(autoincrement())
  user_name          String         @unique
  email              String         @unique
  password           String?
  telephone          String?
  image              String?
  refferal_code      String?
  role               Role           @default(Customer)
  email_verification Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  user_Adresses      User_Address[]
  stores             Store[]
  carts              Cart[]
  orders             Orders[]
  payment            Payment[]
}

enum Role {
  Customer
  Store_Admin
  Super_Admin
}

model User_Address {
  id        Int        @id @default(autoincrement())
  user_id   Int
  label     String
  name      String
  phone     String
  street    String
  city      String
  cityId    Int
  province  String
  latitude  Float
  longitude Float
  isPrimary Boolean
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shipments Shipment[]
}

model Store {
  id                  Int                 @id @default(autoincrement())
  user_id             Int
  street              String
  city                String
  province            String
  cityId              Int
  latitude            Float
  longitude           Float
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_inventories Product_Inventory[]
  vouchers            Voucher[]
  order_items         Order_Item[]
  shipments           Shipment[]
}

model Product {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  description         String              @db.Text
  category_id         Int?
  price               Decimal
  weight              Decimal
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  category            Product_Category?   @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product_inventories Product_Inventory[]
  vouchers            Voucher[]
  carts               Cart[]
  order_items         Order_Item[]
  images              Image[]
}

model Image {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Product_Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product_Inventory {
  id         Int        @id @default(autoincrement())
  store_id   Int
  product_id Int
  quantity   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product    Product    @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  stocklogs  Stocklog[]
}

model Stocklog {
  id           Int               @id @default(autoincrement())
  inventory_id Int
  quantity     Int
  typeLog      StockLogType
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  inventory    Product_Inventory @relation(fields: [inventory_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum StockLogType {
  Addition
  Reduction
}

model Voucher {
  id           Int           @id @default(autoincrement())
  voucher_code String
  product_id   Int?
  store_id     Int
  type         Discount_Type
  amount       Decimal
  limit_usage  Int
  expired_at   DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  store        Store         @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product      Product?      @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders       Orders[]
}

enum Discount_Type {
  Amount
  Percentage
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Orders {
  id          Int          @id @default(autoincrement())
  user_id     Int
  shipment_id Int
  voucher_id  Int?
  total       Decimal
  status      Order_Status @default(pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voucher     Voucher?     @relation(fields: [voucher_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shipment    Shipment     @relation(fields: [shipment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_Items Order_Item[]
  payment     Payment[]
}

model Order_Item {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  store_id   Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store      Store    @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Shipment {
  id         Int          @id @default(autoincrement())
  address_id Int
  store_id   Int
  amount     Decimal
  type       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  address    User_Address @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store      Store        @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders     Orders[]
}

model Payment {
  id            Int            @id @default(autoincrement())
  invoice       String         @unique
  user_id       Int
  order_id      Int            @unique
  total         Decimal
  bank          String?
  va_number     String?
  method        Payment_Method
  status        Payment_Status
  proof_payment String?
  expired_at    DateTime
  shipped_at    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  order         Orders         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Payment_Method {
  Virtual_Account
  Transfer_Manual
}

enum Payment_Status {
  pending
  Confirmation
  Confirmed
  Cancelled
}

enum Order_Status {
  pending
  confirmation
  on_process
  shipped
  confirmed
  cancelled
}
